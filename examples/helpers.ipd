# vim: set syntax=python:

# Copyright 2019 GM Cruise LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http:#www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


appsv1 = proto.package("k8s.io.api.apps.v1")
corev1 = proto.package("k8s.io.api.core.v1")
intstr = proto.package("k8s.io.apimachinery.pkg.util.intstr")


def env_from_field(name, field):
    return corev1.EnvVar(
        name=name,
        valueFrom=corev1.EnvVarSource(
            fieldRef=corev1.ObjectFieldSelector(
                fieldPath=field,
            )
        )
    )


def env_from_secret(name, secret_name, secret_key):
    return corev1.EnvVar(
        name=name,
        valueFrom=corev1.EnvVarSource(
            secretKeyRef=corev1.SecretKeySelector(
                localObjectReference=corev1.LocalObjectReference(
                    name=secret_name,
                ),
                key=secret_key,
            )
        )
    )


def env(name, value):
    return corev1.EnvVar(
        name=name,
        value=value,
    )


def health_probe(port, init_delay=10, timeout=1, period=10,
                 success_threshold=1, failure_threshold=3):
    return corev1.Probe(
        handler=corev1.Handler(
            httpGet=corev1.HTTPGetAction(
                path="/healthz",
                port=intstr.IntOrString(intVal=port),
            ),
        ),
        initialDelaySeconds=init_delay,
        timeoutSeconds=timeout,
        successThreshold=success_threshold,
        failureThreshold=failure_threshold,
        periodSeconds=period,
    )


def container_port(name, port, hostPort=0, protocol="TCP"):
    return corev1.ContainerPort(
        name=name,
        containerPort=port,
        protocol=protocol,
        hostPort=hostPort,
    )


def rolling_update_dep(max_down=1, max_surge=1):
    return appsv1.RollingUpdateDeployment(
        maxUnavailable=intstr.IntOrString(intVal=max_down),
        maxSurge=intstr.IntOrString(intVal=max_surge),
    )
